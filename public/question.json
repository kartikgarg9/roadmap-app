{
    "javascript": [
      { "question": "What is JavaScript?", "answer": "JavaScript is a programming language used to create dynamic web content." },
      { "question": "What are JavaScript data types?", "answer": "String, Number, Boolean, Object, Undefined, Null, and Symbol." },
      { "question": "What is the difference between `==` and `===`?", "answer": "`==` compares values after type conversion, while `===` compares values and types." },
      { "question": "What is a closure?", "answer": "A closure is a function that retains access to its outer scope even after the outer function has returned." },
      { "question": "What are JavaScript promises?", "answer": "Promises are objects representing the eventual completion or failure of an asynchronous operation." },
      { "question": "What is the purpose of `async` and `await`?", "answer": "`async` and `await` simplify writing asynchronous code by making it look synchronous." },
      { "question": "What is event delegation?", "answer": "Event delegation is a technique where a single event handler manages events for multiple elements." },
      { "question": "What is the DOM?", "answer": "The DOM (Document Object Model) represents the structure of a web page in a tree-like format." },
      { "question": "What is hoisting?", "answer": "Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their scope." },
      { "question": "What is the difference between `var`, `let`, and `const`?", "answer": "`var` has function scope, while `let` and `const` have block scope. `const` cannot be reassigned." },
      { "question": "What is an IIFE?", "answer": "An IIFE (Immediately Invoked Function Expression) is a function that is executed immediately after being defined." },
      { "question": "What are arrow functions?", "answer": "Arrow functions are a concise way to write functions, introduced in ES6." },
      { "question": "What is the difference between `call`, `apply`, and `bind`?", "answer": "`call` and `apply` invoke functions with a specific `this` context, while `bind` creates a new function with a specific `this` context." },
      { "question": "What is the use of `map`, `filter`, and `reduce`?", "answer": "`map` transforms arrays, `filter` returns elements meeting a condition, and `reduce` aggregates values." },
      { "question": "What is `typeof` in JavaScript?", "answer": "`typeof` returns the data type of a variable or expression." },
      { "question": "What is the difference between synchronous and asynchronous code?", "answer": "Synchronous code executes sequentially, while asynchronous code can execute out of sequence using callbacks, promises, or async/await." },
      { "question": "What is the purpose of the `this` keyword?", "answer": "`this` refers to the context in which a function is executed." },
      { "question": "What are JavaScript modules?", "answer": "JavaScript modules allow you to break code into reusable pieces using `import` and `export`." },
      { "question": "What is event bubbling?", "answer": "Event bubbling is the process where events propagate from a child element to its parent elements." },
      { "question": "What is the `fetch` API?", "answer": "The `fetch` API is used to make HTTP requests in JavaScript." }
    ],
    "python": [
      { "question": "What is Python?", "answer": "Python is a high-level, interpreted programming language." },
      { "question": "What are Python's key features?", "answer": "Python features include simplicity, readability, portability, and a rich standard library." },
      { "question": "What is a list in Python?", "answer": "A list is a mutable collection of items in Python." },
      { "question": "What are Python's data types?", "answer": "Data types include int, float, str, list, tuple, dict, and set." },
      { "question": "What is a Python dictionary?", "answer": "A dictionary is a collection of key-value pairs." },
      { "question": "What is PEP 8?", "answer": "PEP 8 is the style guide for Python code." },
      { "question": "What is the difference between `is` and `==`?", "answer": "`is` checks for object identity, while `==` checks for value equality." },
      { "question": "What is a generator in Python?", "answer": "Generators are functions that yield values one at a time using the `yield` keyword." },
      { "question": "What is a Python decorator?", "answer": "A decorator is a function that modifies another function or method." },
      { "question": "What is the difference between `list` and `tuple`?", "answer": "Lists are mutable, while tuples are immutable." },
      { "question": "What is a Python module?", "answer": "A module is a Python file containing code like functions and classes." },
      { "question": "What is a lambda function?", "answer": "A lambda function is an anonymous function in Python." },
      { "question": "What is the purpose of the `self` keyword?", "answer": "`self` refers to the current instance of a class in Python." },
      { "question": "What is Python's GIL?", "answer": "The GIL (Global Interpreter Lock) is a mutex that protects access to Python objects." },
      { "question": "What are Python's built-in data structures?", "answer": "Built-in data structures include lists, tuples, dictionaries, and sets." },
      { "question": "What is a Python package?", "answer": "A package is a collection of modules." },
      { "question": "What is the difference between `deepcopy` and `copy`?", "answer": "`deepcopy` copies an object and its nested objects, while `copy` creates a shallow copy." },
      { "question": "What is a Python exception?", "answer": "An exception is an error that occurs during program execution." },
      { "question": "What is the `with` statement?", "answer": "`with` is used to wrap code blocks with methods defined by a context manager." },
      { "question": "What is Python's `range()` function?", "answer": "`range()` generates a sequence of numbers." }
    ],
    "react": [
      { "question": "What is React?", "answer": "React is a library for building user interfaces." },
      { "question": "What are React components?", "answer": "Components are reusable pieces of UI in React." },
      { "question": "What is JSX?", "answer": "JSX is a syntax extension for writing HTML in JavaScript." },
      { "question": "What is a functional component?", "answer": "A functional component is a JavaScript function that returns React elements." },
      { "question": "What are React hooks?", "answer": "Hooks allow you to use state and lifecycle methods in functional components." },
      { "question": "What is `useState`?", "answer": "`useState` is a hook for managing state in functional components." },
      { "question": "What is `useEffect`?", "answer": "`useEffect` is a hook for handling side effects in functional components." },
      { "question": "What is the Virtual DOM?", "answer": "The Virtual DOM is a lightweight representation of the actual DOM." },
      { "question": "What is Redux?", "answer": "Redux is a state management library often used with React." },
      { "question": "What is `props`?", "answer": "`props` are inputs to React components." },
      { "question": "What is `state`?", "answer": "`state` is a JavaScript object that holds dynamic data." },
      { "question": "What is `context`?", "answer": "React Context is used to pass data through the component tree without props." },
      { "question": "What is `React Router`?", "answer": "React Router is a library for routing in React applications." },
      { "question": "What is `memo` in React?", "answer": "`memo` is used to optimize performance by memoizing components." },
      { "question": "What is `useRef`?", "answer": "`useRef` is a hook for accessing DOM elements or persisting state." },
      { "question": "What is the difference between `class` and `functional` components?", "answer": "Class components use classes and lifecycle methods, while functional components use functions and hooks." },
      { "question": "What is `Fragment`?", "answer": "`Fragment` is used to group multiple elements without adding extra nodes to the DOM." },
      { "question": "What is `strict mode`?", "answer": "Strict mode highlights potential problems in a React application." },
      { "question": "What is `React.lazy`?", "answer": "`React.lazy` enables lazy loading of components." },
      { "question": "What is `ErrorBoundary`?", "answer": "`ErrorBoundary` is a component for handling errors in React." }
    ],
    "nodejs": [
      { "question": "What is Node.js?", "answer": "Node.js is a runtime environment for running JavaScript outside the browser." },
      { "question": "What is the purpose of `npm`?", "answer": "`npm` is a package manager for Node.js." },
      { "question": "What is `EventEmitter`?", "answer": "`EventEmitter` is a class in Node.js for handling events." },
      { "question": "What is `Buffer`?", "answer": "`Buffer` is used to handle binary data in Node.js." },
      { "question": "What are streams?", "answer": "Streams are used to read or write data in chunks." },
      { "question": "What is middleware in Express?", "answer": "Middleware functions process requests in Express." },
      { "question": "What is the `fs` module?", "answer": "`fs` provides file system operations in Node.js." },
      { "question": "What is a callback function?", "answer": "A callback function is executed after another function completes." },
      { "question": "What is `process` in Node.js?", "answer": "`process` provides information about the current Node.js process." },
      { "question": "What is `require`?", "answer": "`require` imports modules in Node.js." },
      { "question": "What is `module.exports`?", "answer": "`module.exports` exports code for use in other files." },
      { "question": "What is clustering in Node.js?", "answer": "Clustering allows Node.js to use multiple cores for handling requests." },
      { "question": "What is `Express.js`?", "answer": "Express.js is a web application framework for Node.js." },
      { "question": "What is `CORS`?", "answer": "CORS is a mechanism for enabling cross-origin requests." },
      { "question": "What is `body-parser`?", "answer": "`body-parser` is a middleware for parsing request bodies." },
      { "question": "What is the `crypto` module?", "answer": "`crypto` provides cryptographic functionalities in Node.js." },
      { "question": "What is `child_process`?", "answer": "`child_process` allows you to run external commands in Node.js." },
      { "question": "What is the difference between `readFile` and `readFileSync`?", "answer": "`readFile` is asynchronous, while `readFileSync` is synchronous." },
      { "question": "What is the `http` module?", "answer": "`http` is used to create servers in Node.js." },
      { "question": "What is the difference between `path.join` and `path.resolve`?", "answer": "`path.join` joins paths, while `path.resolve` resolves an absolute path." }
    ]
  }
  